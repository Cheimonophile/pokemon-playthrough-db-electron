generator client {
  provider = "prisma-client-js"
  output   = "./prisma-client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Version {
  id         String  @id @default(cuid())
  name       String  @unique
  generation Int
  fanmade    Boolean

  playthroughs Playthrough[]
}

model Region {
  id   String @id @default(cuid())
  name String @unique

  locations Location[]
}

model Ball {
  id    String  @id @default(cuid())
  name  String
  hisui Boolean

  teamMembers TeamMember[]

  @@unique([name, hisui])
}

model Type {
  id    String @id @default(cuid())
  name  String @unique
  color String

  speciesType1 Species[] @relation("species-type1")
  speciesType2 Species[] @relation("species-type2")
}

model BattleType {
  id   String @id @default(cuid())
  name String @unique

  battleEvents BattleEvent[]
}

model CatchType {
  id     String  @id @default(cuid())
  name   String
  detail String?

  catchEvents CatchEvent[]

  @@unique([name, detail])
}

model Item {
  id   String @id @default(cuid())
  name String @unique

  itemEvents ItemEvent[]
}

model Location {
  id       String @id @default(cuid())
  name     String
  regionId String

  region Region @relation(fields: [regionId], references: [id])

  caughtTeamMembers TeamMember[]
  events            Event[]

  @@unique([name, regionId])
}

model Species {
  id         String  @id @default(cuid())
  name       String
  form       String?
  dexNo      Int
  generation Int
  type1Id    String
  type2Id    String?

  type1 Type  @relation("species-type1", fields: [type1Id], references: [id])
  type2 Type? @relation("species-type2", fields: [type2Id], references: [id])

  caughtTeamMembers TeamMember[]
  teamMemberChanges TeamMemberChange[]

  @@unique([name, form])
}

model Playthrough {
  idNo             String   @id
  name             String
  versionId        String
  adventureStarted DateTime

  version Version @relation(fields: [versionId], references: [id])

  teamMembers TeamMember[]
  events      Event[]
}

model TeamMember {
  id               String   @id @default(cuid())
  playthroughIdNo  String
  slot             Int
  nickname         String?
  caughtDate       DateTime @default(now())
  caughtLocationId String
  caughtSpeciesId  String
  caughtLevel      Int
  ballId           String
  gender           String

  playthrough    Playthrough @relation(fields: [playthroughIdNo], references: [idNo])
  caughtLocation Location    @relation(fields: [caughtLocationId], references: [id])
  caughtSpecies  Species     @relation(fields: [caughtSpeciesId], references: [id])
  ball           Ball        @relation(fields: [ballId], references: [id])

  catchEvents       CatchEvent[]
  teamMemberChanges TeamMemberChange[]

  @@unique([playthroughIdNo, slot])
}

model TrainerClass {
  id   String @id @default(cuid())
  name String @unique

  trainers Trainer[]
}

model Trainer {
  id      String @id @default(cuid())
  name    String
  classId String

  trainerClass TrainerClass @relation(fields: [classId], references: [id])

  battleEventsOpponent1 BattleEvent[] @relation("battleEvent-opponent1")
  battleEventsOpponent2 BattleEvent[] @relation("battleEvent-opponent2")
  battleEventsPartner   BattleEvent[] @relation("battleEvent-partner")

  @@unique([name, classId])
}

model Event {
  no              Int      @id @default(autoincrement())
  playthroughIdNo String
  locationId      String
  date            DateTime

  playthrough Playthrough @relation(fields: [playthroughIdNo], references: [idNo])
  location    Location    @relation(fields: [locationId], references: [id])

  battleEvent       BattleEvent?
  itemEvent         ItemEvent?
  catchEvent        CatchEvent?
  teamMemberChanges TeamMemberChange[]
}

model BattleEvent {
  no           Int     @id
  battleTypeId String
  opponent1Id  String
  opponent2Id  String?
  partnerId    String?
  lost         Boolean @default(false)
  round        Int?

  event      Event      @relation(fields: [no], references: [no])
  battleType BattleType @relation(fields: [battleTypeId], references: [id])
  opponent1  Trainer    @relation("battleEvent-opponent1", fields: [opponent1Id], references: [id])
  opponent2  Trainer?   @relation("battleEvent-opponent2", fields: [opponent2Id], references: [id])
  partner    Trainer?   @relation("battleEvent-partner", fields: [partnerId], references: [id])
}

model ItemEvent {
  no     Int    @id @default(autoincrement())
  itemId String

  event Event @relation(fields: [no], references: [no])
  item  Item  @relation(fields: [itemId], references: [id])
}

model CatchEvent {
  no           Int    @id @default(autoincrement())
  catchTypeId  String
  teamMemberId String

  event      Event      @relation(fields: [no], references: [no])
  catchType  CatchType  @relation(fields: [catchTypeId], references: [id])
  teamMember TeamMember @relation(fields: [teamMemberId], references: [id])
}

model TeamMemberChange {
  teamMemberId String
  eventNo      Int
  level        Int?
  speciesId    String?

  teamMember TeamMember @relation(fields: [teamMemberId], references: [id])
  event      Event      @relation(fields: [eventNo], references: [no])
  species    Species?   @relation(fields: [speciesId], references: [id])

  @@id([teamMemberId, eventNo])
}
