import { app, ipcMain } from 'electron';
import { makeMigrationsMap } from '@main/prisma/prisma';
import { WindowManager } from '@main/managers/WindowManager';
import { databaseManager } from '@main/managers/DatabaseManager';


// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string; // eslint-disable-line @typescript-eslint/no-unused-vars
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string; // eslint-disable-line @typescript-eslint/no-unused-vars

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
// eslint-disable-next-line @typescript-eslint/no-require-imports
if (require('electron-squirrel-startup')) {
  app.quit();
}


// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  WindowManager.getOrCreateWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  WindowManager.getOrCreateWindow();
});


ipcMain.handle('setDatabase', async () => {
  console.log('setDatabase');
  await makeMigrationsMap();
})


databaseManager.openDatabase('path/to/database');